# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog,QMenu,QLineEdit, QDialog
from PyQt5.QtGui import QCursor
from Beziehung import keyword_search_onto,ontograf_simple,convert_to_graphviz, show_graph
import difflib
#/// import extra
import sys
from owlready2 import *

#//redefine foucus in event
class MyLineEdit(QtWidgets.QLineEdit):    
    def __init__(self, parent):
        super(MyLineEdit,self).__init__(parent)
    def focusInEvent(self,e):
        self.setText("")
class MylistWidget(QtWidgets.QListWidget):
    def __init__(self, parent, onto,file):
        self.onto = onto
        self.file = file
        super(MylistWidget,self).__init__(parent)
    def change_name_accept_handler(self):
        selected_item =self.currentItem().text()
        entity = keyword_search_onto(selected_item, self.onto)
        entity.set_name(entity, self.change_name_dialog.lineEdit_2.text())
        self.onto.save(self.file)
        self.di_change_name.close()
        pass
    def change_name_reject_handler(self):
        self.di_change_name.close()
    
    def mouseReleaseEvent(self, event):
        print(event)
        if event.button()== QtCore.Qt.RightButton:
            popMenu = QMenu()                                  
            change_name_action = popMenu.addAction("change name")
            change_name_action.triggered.connect(self.change_onto_name)
            popMenu.exec_(QCursor.pos())            
    def change_onto_name(self):       
        from changeNameDialog import Ui_Dialog
        selected_item =self.currentItem().text()
        self.di_change_name = QDialog()
        self.change_name_dialog = Ui_Dialog(self)       
        self.change_name_dialog.setupUi(self.di_change_name)
        self.change_name_dialog.lineEdit.setText(selected_item)
        self.di_change_name.show()       
        pass
class Ui_Form(object):
    def __init__(self):
        self.file="./pizza.owl"
        self.onto=get_ontology("./pizza.owl").load()
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1048, 904)
        self.classBtn = QtWidgets.QPushButton(Form)
        self.classBtn.setGeometry(QtCore.QRect(10, 200, 80, 26))
        self.classBtn.setObjectName("classBtn")
        self.textEdit = QtWidgets.QTextEdit(Form)
        self.textEdit.setGeometry(QtCore.QRect(10, 250, 491, 441))
        self.textEdit.setObjectName("textEdit")
        self.propertyBtn = QtWidgets.QPushButton(Form)
        self.propertyBtn.setGeometry(QtCore.QRect(110, 200, 80, 26))
        self.propertyBtn.setObjectName("propertyBtn")
        #use myline Edit
        self.ontoSearch = MyLineEdit(Form)        
        self.ontoSearch.setGeometry(QtCore.QRect(770, 200, 141, 26))
        self.ontoSearch.setObjectName("ontoSearch")
        self.searchBtn = QtWidgets.QPushButton(Form)
        self.searchBtn.setGeometry(QtCore.QRect(920, 200, 80, 26))
        self.searchBtn.setObjectName("searchBtn")
        #use my list widget
        #self.searchResultView = QtWidgets.QListWidget(Form)
        self.searchResultView = MylistWidget(Form, self.onto,self.file)
        self.searchResultView.setGeometry(QtCore.QRect(510, 250, 491, 441))
        self.searchResultView.setObjectName("searchResultView")
        self.openFileBtn = QtWidgets.QPushButton(Form)
        self.openFileBtn.setGeometry(QtCore.QRect(210, 80, 80, 26))
        self.openFileBtn.setObjectName("openFileBtn")
        self.individualBtn = QtWidgets.QPushButton(Form)
        self.individualBtn.setGeometry(QtCore.QRect(220, 200, 80, 26))
        self.individualBtn.setObjectName("individualBtn")
        self.openingFile = QtWidgets.QLineEdit(Form)
        self.openingFile.setGeometry(QtCore.QRect(340, 80, 611, 26))
        self.openingFile.setText("current onto file:"+self.file)
        self.openingFile.setObjectName("openingFile")
        self.openingFile.setEnabled(False)
        
        
        #connect click event        
        self.classBtn.clicked.connect(self.show_classes)        
        self.propertyBtn.clicked.connect(self.show_object_properties)
        self.searchBtn.clicked.connect(self.search_onto)
        self.individualBtn.clicked.connect(self.show_individual)
        self.openFileBtn.clicked.connect(self.openfile)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)    
    # set text
    def setText(self, text):
        self.textEdit.setText(text) 
    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.classBtn.setText(_translate("Form", "Classes"))
        self.propertyBtn.setText(_translate("Form", "properties"))
        self.ontoSearch.setText(_translate("Form", "Search Onto here"))
        self.searchBtn.setText(_translate("Form", "Search"))
        self.openFileBtn.setText(_translate("Form", "OpenFile"))
        self.individualBtn.setText(_translate("Form", "individual"))
    def openfile(self):
        path = QFileDialog.getOpenFileName(None, 'Open a file', '','All Files (*.*)')
        if path != ('', ''):
            print("File path : "+ path[0])
            self.file=path[0]
            self.openingFile.setText("current onto file:"+self.file)
            self.onto=get_ontology(path[0]).load()
        
    def show_classes(self):
        class_list = []       
        for c in self.onto.classes(): 
            class_list.append(c.name)
        ui.setText("\n".join(class_list))
    def show_individual(self):
        individual_list = []        
        for c in self.onto.individuals(): 
            individual_list.append(c.name)
        ui.setText("\n".join(individual_list))    
    def show_object_properties(self):
        property_list = []
        for c in self.onto.object_properties(): 
            property_list.append(c.name)
        ui.setText("\n".join(property_list))        
    def search_onto(self):
        def item_double_clicked(item):
            selected_item = ui.searchResultView.currentItem().text()
            entity = keyword_search_onto(selected_item, self.onto)
            kg = ontograf_simple(entity, self.onto)
            print(kg)
            e = convert_to_graphviz(kg)    
            show_graph(e)
        def item_mouse_release_event(event):
            print(event)
            
        search_text = ui.ontoSearch.text()        
        ui.searchResultView.clear()
        classes = list(self.onto.classes())
        classes_str_list = [x.name for x in classes]
        search_results = difflib.get_close_matches(search_text, classes_str_list)        
        ui.searchResultView.doubleClicked.connect(item_double_clicked)        
        for result in search_results:
            ui.searchResultView.addItem(result)
    
        
if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_Form()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
